package com.hanthink.sw.manager.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.hanthink.base.manager.impl.AbstractManagerImpl;
import com.hanthink.base.model.TableColumnVO;
import com.hanthink.base.model.TableOpeLogVO;
import com.hanthink.sw.dao.SwSupplierGroupDao;
import com.hanthink.sw.manager.SwSupplierGroupManager;
import com.hanthink.sw.model.SwSupplierGroupModel;
import com.hanthink.sw.model.SwSupplierGroupModelImport;
import com.hanthink.util.excel.ExcelUtil;
import com.hotent.base.api.Page;
import com.hotent.base.core.util.string.StringUtil;
import com.hotent.base.db.api.Dao;
import com.hotent.base.db.mybatis.domain.DefaultPage;
import com.hotent.base.db.mybatis.domain.PageList;
import com.hotent.org.api.model.IUser;
import com.hotent.sys.util.ContextUtil;

/**
* <p>Title: SwSupplierGroupManagerImpl.java<／p>
* <p>Description: <／p>
* <p>Company: hanthink<／p>
* @author luoxq
* @date 2018年10月11日
*/
@Service("SwSupplierGroupManager")
public class SwSupplierGroupManagerImpl extends AbstractManagerImpl<String, SwSupplierGroupModel>
implements SwSupplierGroupManager{

	@Resource
	private SwSupplierGroupDao swSupplierGroupDao;
	
	@Override
	protected Dao<String, SwSupplierGroupModel> getDao() {
		return swSupplierGroupDao;
	}

	/**
	 * 
	* @Title: queryJisoGroupPage 
	* @Description: 分页查询供应商分组信息 
	* @param @param model
	* @param @param p
	* @param @return    
	* @return PageList<SwSupplierGroupModel> 
	* @throws 
	* @author luoxq
	* @date   2018年10月11日 下午5:50:48
	 */
	@Override
	public PageList<SwSupplierGroupModel> queryJisoGroupPage(SwSupplierGroupModel model, DefaultPage p) {
		return swSupplierGroupDao.queryJisoGroupPage(model,p);
	}

	/**
	 * 
	* @Title: curdGetGroup 
	* @Description: 获取供应商分组信息  
	* @param @param groupId
	* @param @return    
	* @return SwSupplierGroupModel 
	* @throws 
	* @author luoxq
	* @date   2018年10月11日 下午6:19:07
	 */
	@Override
	public SwSupplierGroupModel curdGetGroup(String groupId) {
		return swSupplierGroupDao.curdGetGroup(groupId);
	}

	/**
	 * 
	* @Title: updateAndLog 
	* @Description: 修改供应商分组信息，并记录日志 
	* @param @param swSupplierGroupModel
	* @param @param ipAddr    
	* @return void 
	* @throws 
	* @author luoxq
	* @date   2018年10月11日 下午10:37:34
	 */
	@Override
	public void updateAndLog(SwSupplierGroupModel swSupplierGroupModel, String ipAddr) {
		TableOpeLogVO logVO = new TableOpeLogVO();
		logVO.setOpeUserName(ContextUtil.getCurrentUser().getAccount());
		logVO.setOpeIp(ipAddr); 
		logVO.setFromName("界面更新");
		logVO.setOpeType(TableOpeLogVO.OPE_TYPE_MODIFY);
		logVO.setTableName("MM_SW_SUPPLIER_GROUP");
		TableColumnVO pkColumnVO = new TableColumnVO();
		pkColumnVO.setColumnName("GROUP_ID");
		pkColumnVO.setColumnVal(swSupplierGroupModel.getGroupId());
		this.tableDataLogDao.logOpeTableData(logVO, pkColumnVO);
		
		swSupplierGroupDao.updateGroup(swSupplierGroupModel);
	}

	/**
	 * 
	* @Title: getByGroupName 
	* @Description: 检查分组名称是否已经存在 
	* @param @param groupName
	* @param @return    
	* @return SwSupplierGroupModel 
	* @throws 
	* @author luoxq
	* @date   2018年10月11日 下午10:38:10
	 */
	@Override
	public SwSupplierGroupModel getByGroupName(String groupName) {
		return swSupplierGroupDao.getByGroupName(groupName);
	}

	/**
	 * 
	* @Title: removeAndLogByIds 
	* @Description: 删除供应商分组信息，并记录日志 
	* @param @param groupIds
	* @param @param ipAddr    
	* @return void 
	* @throws 
	* @author luoxq
	* @date   2018年10月12日 上午9:40:39
	 */
	@Override
	public void removeAndLogByIds(String[] groupIds, String ipAddr) {
		//日志记录
		TableOpeLogVO logVO = new TableOpeLogVO();
		logVO.setOpeUserName(ContextUtil.getCurrentUser().getAccount());
		logVO.setOpeIp(ipAddr); 
		logVO.setFromName("界面更新");
		logVO.setOpeType(TableOpeLogVO.OPE_TYPE_DELETE);
		logVO.setTableName("MM_SW_SUPPLIER_GROUP");
		TableColumnVO pkColumnVO = new TableColumnVO();
		pkColumnVO.setColumnName("GROUP_ID");
		pkColumnVO.setColumnValArr(groupIds);
		this.tableDataLogDao.logOpeTableDataBatch(logVO, pkColumnVO);
				
		swSupplierGroupDao.removeByGroupIds(groupIds);
	}

	/**
	 * 
	* @Title: insertGroup 
	* @Description: 新增供应商分组信息 
	* @param @param swSupplierGroupModel    
	* @return void 
	* @throws 
	* @author luoxq
	* @date   2018年10月12日 上午11:06:56
	 */
	@Override
	public String insertGroup(SwSupplierGroupModel swSupplierGroupModel) {
		return swSupplierGroupDao.insertGroup(swSupplierGroupModel);
	}

	@Override
	public PageList<SwSupplierGroupModel> queryJisoSupplierPage(SwSupplierGroupModel model, DefaultPage p) {
		return swSupplierGroupDao.queryJisoSupplierPage(model,p);
	}

	/**
	 * 
	* @Title: insertGroupId 
	* @Description: 将groupId插入从表 
	* @param @param swSupplierGroupModel    
	* @return void 
	* @throws 
	* @author luoxq
	* @date   2018年10月12日 上午11:55:04
	 */
	@Override
	public void insertGroupId(SwSupplierGroupModel swSupplierGroupModel) {
         swSupplierGroupDao.insertGroupId(swSupplierGroupModel);		
	}

	/**
	 * 
	* @Title: getSupplierListUnGroup 
	* @Description: 分页查询未分组供应商信息 
	* @param @param model
	* @param @param p
	* @param @return    
	* @return PageList<SwSupplierGroupModel> 
	* @throws 
	* @author luoxq
	* @date   2018年10月12日 下午3:35:33
	 */
	@Override
	public PageList<SwSupplierGroupModel> getSupplierListUnGroup(SwSupplierGroupModel model, DefaultPage p) {
		return swSupplierGroupDao.getSupplierListUnGroup(model,p);
	}

	@Override
	public void removeSupplierAndLogByIds(String groupId, String[] supplierNos, String ipAddr) {
		//日志记录
		TableOpeLogVO logVO = new TableOpeLogVO();
		logVO.setOpeUserName(ContextUtil.getCurrentUser().getAccount());
		logVO.setOpeIp(ipAddr); 
		logVO.setFromName("界面更新");
		logVO.setOpeType(TableOpeLogVO.OPE_TYPE_DELETE);
		logVO.setTableName("MM_SW_SUP_GROUP_MEMBERS");
		TableColumnVO pkColumnVO = new TableColumnVO();
		pkColumnVO.setColumnName("SUPPLIER_NO");
		pkColumnVO.setColumnValArr(supplierNos);
		this.tableDataLogDao.logOpeTableDataBatch(logVO, pkColumnVO);
						
		swSupplierGroupDao.removeSupplierByGroupIds(groupId,supplierNos);		
	}

	/**
	 * 
	* @Title: querySwSupplierGroupByKey 
	* @Description: 查询需要导出的供应商分组数据 
	* @param @param model
	* @param @return    
	* @return List<SwSupplierGroupModel> 
	* @throws 
	* @author luoxq
	* @date   2018年10月13日 上午9:46:14
	 */
	@Override
	public List<SwSupplierGroupModel> querySwSupplierGroupByKey(SwSupplierGroupModel model) {
		return swSupplierGroupDao.querySwSupplierGroupByKey(model);
	}

	/**
	 * 
	* @Title: deleteImportTempDataByUUID 
	* @Description: 根据IMP_UUID删除导入的临时供应商分组数据 
	* @param @param uuid    
	* @return void 
	* @throws 
	* @author luoxq
	* @date   2018年10月13日 上午11:09:28
	 */
	@Override
	public void deleteImportTempDataByUUID(String uuid) {
		swSupplierGroupDao.deleteImportTempDataByUUID(uuid);
	}

	/**
	 * 
	* @Title: queryImportTempData 
	* @Description: 查询导入的临时供应商分组信息订单用量数据 
	* @param @param paramMap
	* @param @param page
	* @param @return    
	* @return PageList<SwSupplierGroupModelImport> 
	* @throws 
	* @author luoxq
	* @date   2018年10月13日 上午11:24:27
	 */
	@Override
	public PageList<SwSupplierGroupModelImport> queryImportTempData(Map<String, String> paramMap, Page page) {
		return swSupplierGroupDao.queryImportTempData(paramMap,page);
	}

	/**
	 * 
	* @Title: importModel 
	* @Description: 导入文件 
	* @param @param file
	* @param @param uuid
	* @param @param ipAddr
	* @param @param user
	* @param @return    
	* @return Map<String,Object> 
	* @throws 
	* @author luoxq
	* @date   2018年10月13日 上午11:40:36
	 */
	@Override
	public Map<String, Object> importModel(MultipartFile file, String uuid, String ipAddr, IUser user) {
		Map<String,Object> rtnMap = new HashMap<String, Object>();
        Boolean result = true;
        String console = "";
        
        if(file == null || file.isEmpty()){
            result = false;
            console = "文件为空！";
            throw new RuntimeException(console);
        }
        
        //读取Excel数据
        String fileExt = file.getOriginalFilename().substring(file.getOriginalFilename().indexOf("."));
        String[] columns = {"groupName", "supplierNo"};
        List<SwSupplierGroupModelImport> importList = null;
        try {
            if(ExcelUtil.EXCEL_XLS.equals(fileExt.toLowerCase())){
                importList = (List<SwSupplierGroupModelImport>) ExcelUtil.importExcelXLS(new SwSupplierGroupModelImport(), file.getInputStream(), columns, 1, 0);
            }else if(ExcelUtil.EXCEL_XLSX.equals(fileExt.toLowerCase())){
                importList = (List<SwSupplierGroupModelImport>) ExcelUtil.importExcelXLSX(new SwSupplierGroupModelImport(), file.getInputStream(), columns, 1, 0);
            }else{
                result = false;
                console = "上传文件不是excel类型！";
                throw new RuntimeException(console);
            }
        } catch (Exception e) {
            e.printStackTrace();
            result = false;
            console = e.getMessage();
            throw new RuntimeException(console);
        }
        
        //数据导入初始化，格式初步检查
        for(SwSupplierGroupModelImport m : importList){
            m.setUuid(uuid);
            m.setFactoryCode(user.getCurFactoryCode());
            m.setCreationUser(user.getAccount());
            m.setImportStatus(ExcelUtil.EXCEL_IMPSTATUS_NO);
            SwSupplierGroupModelImport.checkImportData(m);
        }
        
        //导入数据写入到临时表
        swSupplierGroupDao.insertImportTempData(importList);
        
        //调用存储过程等检查数据准确性
        Map<String, String> ckParamMap = new HashMap<String, String>();
        ckParamMap.put("uuid", uuid);
        ckParamMap.put("userName", ContextUtil.getCurrentUser().getAccount());
        ckParamMap.put("opeIp", ipAddr);
        ckParamMap.put("errorFlag", "");
        ckParamMap.put("errorMsg", "");
        swSupplierGroupDao.checkImportData(ckParamMap);
        result = "0".equals(String.valueOf(ckParamMap.get("errorFlag")));
        if(!result && StringUtil.isEmpty(console)){
            console = String.valueOf(ckParamMap.get("errorMsg"));
        }
        String flag = swSupplierGroupDao.queryIsImportFlag(uuid);
        //临时导入情况返回
        rtnMap.put("result", result);
        rtnMap.put("console", console);
        rtnMap.put("flag", flag);
        return rtnMap;
	}

	/**
	 * 
	* @Title: insertImportData 
	* @Description: 将临时供应商分组维护数据 导入正式表
	* @param @param paramMap    
	* @return void 
	* @throws 
	* @author luoxq
	* @date   2018年10月13日 下午3:11:45
	 */
	@Override
	public void insertImportData(Map<String, String> paramMap) {
		paramMap.put("IMPORT_STATUS_YES", ExcelUtil.EXCEL_IMPSTATUS_YES);
        paramMap.put("importStatus", ExcelUtil.EXCEL_IMPSTATUS_NO);
        
//        swSupplierGroupDao.deleteNotDealData(paramMap);
        swSupplierGroupDao.insertImportData(paramMap);
        
        //更新临时数据导入状态
        swSupplierGroupDao.updateImportDataImpStatus(paramMap);
//		swSupplierGroupDao.insertImportData(paramMap);
		
	}

	@Override
	public List<SwSupplierGroupModel> getSupplierGroupList() {
		return swSupplierGroupDao.getSupplierGroupList();
	}

	/**
	 * 
	 * @Description: 导出在导入时需要修改的数据
	 * @param @param paramMap
	 * @param @param page
	 * @param @return   
	 * @return PageList<SwSupplierGroupModelImport>  
	 * @throws  
	 * @author luoxq
	 * @date 2018年11月28日 上午11:19:06
	 */
	@Override
	public PageList<SwSupplierGroupModelImport> queryImportInformationForPage(Map<String, String> paramMap) {
		
		return swSupplierGroupDao.queryImportInformationForPage(paramMap);
	}

	/**
	 * @Description:  通UUID校验是否有校验结果不通过 
	 * @param: @param uuid
	 * @param: @return    
	 * @return: Integer   
	 * @author: dtp
	 * @date: 2019年1月13日
	 */
	@Override
	public Integer queryIsExistsNotOk(String uuid) {
		return swSupplierGroupDao.queryIsExistsNotOk(uuid);
	}

}

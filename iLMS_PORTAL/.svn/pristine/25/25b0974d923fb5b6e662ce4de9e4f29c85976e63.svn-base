package com.hanthink.sw.controller;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hanthink.business.util.MakeQrcodeImages;
import com.hanthink.sw.manager.SwLongOrderManager;
import com.hanthink.sw.model.SwDemandForecastModel;
import com.hanthink.sw.model.SwLongOrderModel;
import com.hanthink.util.BufferImage.BarCodeImage;
import com.hanthink.util.excel.ExcelUtil;
import com.hotent.base.api.model.ResultMessage;
import com.hotent.base.core.util.FileUtil;
import com.hotent.base.core.web.GenericController;
import com.hotent.base.core.web.RequestUtil;
import com.hotent.base.db.mybatis.domain.DefaultPage;
import com.hotent.base.db.mybatis.domain.PageJson;
import com.hotent.base.db.mybatis.domain.PageList;
import com.hotent.org.api.model.IUser;
import com.hotent.sys.util.ContextUtil;
import com.hotent.sys.util.SysPropertyUtil;

import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;

@Controller
@RequestMapping("/sw/swLongOrder")
public class SwLongOrderController extends GenericController{

	@Resource
	private SwLongOrderManager manager;

	private static Logger log = LoggerFactory.getLogger(SwDemondOrderController.class);

	/**
	 * 订单查询
	 * 
	 * @param request
	 * @param reponse
	 * @param model
	 * @return
	 * @throws Exception lxq
	 */
	@RequestMapping("/queryLongOrderPage")
	public @ResponseBody PageJson queryDemandOrderPage(HttpServletRequest request, HttpServletResponse reponse,
			@ModelAttribute("model") SwLongOrderModel model) throws Exception {
		DefaultPage p = new DefaultPage(new RowBounds(getQueryFilter(request).getPage().getStartIndex(),
				getQueryFilter(request).getPage().getPageSize()));
		PageList<SwLongOrderModel> pageList = manager.queryLongOrderPage(model, p);
		return new PageJson(pageList);
	}
	

	/**
	 * 批量导出
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping("/downloadLongOrderByBatch")
	public void downloadLongOrderByBatch(HttpServletRequest request, HttpServletResponse response,
			@ModelAttribute("model") SwLongOrderModel model) throws Exception {

		try {
			String exportFileName = "长周期订单" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());

			List<SwLongOrderModel> list = (List<SwLongOrderModel>) manager
					.queryLongOrderDownload(model);
			int curNum = list.size();
			if (0 == curNum) {
				ExcelUtil.exportNoDataError(request, response);
				return;
			}
			int sysMaxNum = SysPropertyUtil.getIntByAlias("EXCEL_EXPORT_MAX_SIZE", 10000);
			if (curNum > sysMaxNum) {
				ExcelUtil.exportNumError(sysMaxNum, request, response);
				return;
			}
			if (null != list) {				
				String[] headers = { "版本号", "订单号", "发布月","车型", 
						"零件号", "简号", "零件名称", "订单月","订购数量", 
						"预测月1",
						"预测月1数量", "预测月2", "预测月2数量", "预测月3", "预测月3数量",
						"供应商代码", "出货地","供应商名称","单位" };
				String[] columns = { "version", "orderNo", "currentMonth","carType", 
						"partNo","partShortNo","partNameCn",  "objMonth" ,"orderNum",
						"forecastFirst",
						"forecastFirstNum", "forecastSecond", "forecastSecondNum", "forecastThird", "forecastThirdNum",
						"supplierNo", "supFactory", "supplierName","partUnit" };
				int[] widths = { 100, 100, 80, 80, 130, 80, 150, 
						80, 80, 80, 80, 80, 80, 80, 80, 
						80, 80, 150, 80 };
				ExcelUtil.exportExcel(ExcelUtil.EXCEL_XLSX, request, response, exportFileName, list, headers,
							widths, columns);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.toString());
			throw new Exception("系统错误,请联系管理员");
		}
	} 

	/**
	 * 选择导出
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping("/downloadLongOrderByChoose")
	public void downloadLongOrderByChoose(HttpServletRequest request, HttpServletResponse response) throws Exception {
		 String longOrders = RequestUtil.getString(request, "longOrderArr");
		try {
			String exportFileName = "长周期订单" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
			
			List<Map<String, String>> paramList = new ArrayList<Map<String,String>>();
			String[] longOrderArr = longOrders.split(",");
			for (String longOrder : longOrderArr) {
				Map<String, String> map = new HashMap<String, String>();
				String []vsersionOrderArr = longOrder.split("-");
				map.put("VERSION", vsersionOrderArr[0]);
				map.put("ORDER_NO", vsersionOrderArr[1]);
				map.put("PART_NO", vsersionOrderArr[2]);
				paramList.add(map);
			}
			List<SwLongOrderModel> list = (List<SwLongOrderModel>) manager
					.downloadLongOrderByChoose(paramList);
			int curNum = list.size();
			if (0 == curNum) {
				ExcelUtil.exportNoDataError(request, response);
				return;
			}
			int sysMaxNum = SysPropertyUtil.getIntByAlias("EXCEL_EXPORT_MAX_SIZE", 10000);
			if (curNum > sysMaxNum) {
				ExcelUtil.exportNumError(sysMaxNum, request, response);
				return;
			}
			if (null != list) {				
				String[] headers = { "版本号", "订单号", "发布月","车型", 
						"零件号", "简号", "零件名称", "订单月","订购数量", 
						"预测月1",
						"预测月1数量", "预测月2", "预测月2数量", "预测月3", "预测月3数量",
						"供应商代码", "出货地","供应商名称","单位" };
				String[] columns = { "version", "orderNo", "currentMonth","carType", 
						"partNo","partShortNo","partNameCn",  "objMonth" ,"orderNum",
						"forecastFirst",
						"forecastFirstNum", "forecastSecond", "forecastSecondNum", "forecastThird", "forecastThirdNum",
						"supplierNo", "supFactory", "supplierName","partUnit" };
				int[] widths = { 100, 100, 80, 80, 130, 80, 150, 
						80, 80, 80, 80, 80, 80, 80, 80, 
						80, 80, 150, 80 };
				ExcelUtil.exportExcel(ExcelUtil.EXCEL_XLSX, request, response, exportFileName, list, headers,
							widths, columns);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.toString());
			throw new Exception("系统错误,请联系管理员");
		}
	}

	/**
	 * 标签打印
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping("longOrderPrintLabel")
	public void longOrderPrintLabel(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String ids = request.getParameter("ids");
		String[] idArr = ids.split(",");
		List<SwLongOrderModel> list = null;

		try {

			if (null != idArr && idArr.length > 0) {
				// 打印N张
				List<JasperPrint> JasperPrintList = new ArrayList<JasperPrint>();

				for (int i = 0; i < idArr.length; i++) {
					SwLongOrderModel model = new SwLongOrderModel();
					model.setId(idArr[i]);
					// 查询标签打印信息明细
					list = manager.queryLongOrderPrintLabelList(model);
					for (int j = 0; j < list.size(); j++) {
						list.get(j).setRowId((j + 1) + "");
						list.get(j).setPageCount((j + 1) + "/" + list.size());
					}
					
					String filenurl = FileUtil.getClassesPath() + File.separator + "template" + File.separator
							+ "ireport" + File.separator + "demo" + File.separator + "SW_DEMOND_LABEL.jasper";
					Map<String, Object> map = new HashMap<String, Object>();
					
					SwLongOrderModel swLongOrderModel = list.get(0);
//					String orderType = swLongOrderModel.getOrderType();// 订单类型
//					String spType = model.getSpType();// 售后订单类型,2,3采用特殊打印类型
//					if ("12".equals(orderType) && ("2".equals(spType) || "3".equals(spType))) {
//						filenurl = FileUtil.getClassesPath() + File.separator + "template" + File.separator + "ireport"
//								+ File.separator + "demo" + File.separator + "SW_DEMOND_LABEL_SP.jasper";
//					}
					InputStream file = new FileInputStream(filenurl);

					// 零件号#包装数#erp单号#物流单行号#物流单号#简号#订单类型#追朔等级#供应商代码#零件批次号#同批次数量#uuid
					String code = swLongOrderModel.getPartNo() + "#" + swLongOrderModel.getStandartPackage() + "#" + swLongOrderModel.getPurchaseNo()
							+ "#" + swLongOrderModel.getPurchaseRowNo() + "#" + swLongOrderModel.getOrderNo() + "#" + swLongOrderModel.getPartShortNo()
							+ "#" + swLongOrderModel.getOrderTypeName() + "#" + "" + "#" + swLongOrderModel.getSupplierNo() + "#" + "" + "#"
							+ swLongOrderModel.getOrderQty() + "#" + UUID.randomUUID().toString().replaceAll("-", "");
					BufferedImage img = MakeQrcodeImages.getQrCodeImage(code, "150", "150");
					map.put("QR_INFOS", img);
					JRDataSource jRDataSource = new JRBeanCollectionDataSource(list);
					JasperPrint jasperPrint = JasperFillManager.fillReport(file, map, jRDataSource);
					JasperPrintList.add(jasperPrint);
				}
				if (JasperPrintList.size() > 0) {
					response.setContentType("application/pdf");
					response.setHeader("Content-disposition", "inline;");
					JRPdfExporter exporter = new JRPdfExporter();
					OutputStream out = response.getOutputStream();
					exporter.setParameter(JRExporterParameter.JASPER_PRINT_LIST, JasperPrintList);
					exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, out);
					exporter.exportReport();
//					for (SwLongOrderModel swDemondOrderDetailModel : list) {
//						swDemondOrderManager.updatePrintLabelStatus(swDemondOrderDetailModel);
//					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.toString());
			throw new Exception("系统错误,请联系管理员");
		}
	} 

	/**
	 * 订单打印
	 * 
	 * @param request
	 * @param response
	 * @throws Exception Lxh
	 */
	@RequestMapping("LongOrderPrint")
	public void LongOrderPrint(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String ids = RequestUtil.getString(request, "ids");
		String[] idArr = ids.split(",");
		List<SwLongOrderModel> detailList = null;
		List<SwLongOrderModel> updateList = new ArrayList<SwLongOrderModel>();

		try {

			if (null != idArr && idArr.length > 0) {
				// 打印N张
				List<JasperPrint> JasperPrintList = new ArrayList<JasperPrint>();

				for (int i = 0; i < idArr.length; i++) {
					SwLongOrderModel model_q = new SwLongOrderModel();
					String filenurl = FileUtil.getClassesPath() + File.separator + "template" + File.separator
							+ "ireport" + File.separator + "demo" + File.separator + "DEMOND_ORDER.jasper";
					model_q.setId(idArr[i]);
					updateList.add(model_q);
					// 查询订单明细
					detailList = manager.queryLongOrderDetailList(model_q);
					for (int j = 0; j < detailList.size(); j++) {
						detailList.get(j).setRowId((j + 1) + "");
						detailList.get(j).setPageCount((i + 1) + "/" + idArr.length);
						detailList.get(j).setLabelCount(detailList.size() + "");
						detailList.get(j).setOrderTypeName("长周期");
						detailList.get(j).setPurchaseNo(detailList.get(j).getOrderNo());
					}
					HashMap<String, Object> parameters = new HashMap<String, Object>();
					if (null != detailList && detailList.size() > 0) {
						SwLongOrderModel model = detailList.get(0);
//						String orderType = model.getOrderType();// 订单类型
//						String spType = model.getSpType();// 售后订单类型,2,3采用特殊打印类型
						BufferedImage img = BarCodeImage.creatBarCode(model.getOrderNo());
						
//						filenurl = FileUtil.getClassesPath() + File.separator + "template" + File.separator
//								+ "ireport" + File.separator + "demo" + File.separator + "DEMOND_ORDER_SP.jasper";
//						String hmsOrder = model.getOrderNo() != null ? model.getOrderNo() : " ";
//						img = BarCodeImage.creatBarCode(hmsOrder);
						
						parameters.put("barCode", img);
						InputStream file = new FileInputStream(filenurl);
						JRDataSource jRDataSource = new JRBeanCollectionDataSource(detailList);
						JasperPrint jasperPrint = JasperFillManager.fillReport(file, parameters, jRDataSource);
						JasperPrintList.add(jasperPrint);
					}

				}
				if (JasperPrintList.size() > 0) {
//					SwLongOrderModel model = new SwLongOrderModel();
//					model.setIdArr(idArr);
//					updateDelivery(idArr);
					response.setContentType("application/pdf");
					response.setHeader("Content-disposition", "inline;");
					JRPdfExporter exporter = new JRPdfExporter();
					OutputStream out = response.getOutputStream();
					exporter.setParameter(JRExporterParameter.JASPER_PRINT_LIST, JasperPrintList);
					exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, out);
					exporter.exportReport();

//					manager.updatePrintInfo(updateList);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.toString());
			throw new Exception("系统错误,请联系管理员");
		}
	}
	
//	@RequestMapping("updateDelivery")
//	public void updateDelivery() {
//		
//	} 

	/**
	 * 托盘标签打印
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping("longOrderPrintTpLabel")
	public void demondOrderPrintTpLabel(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String orderNoStr = RequestUtil.getString(request, "orderNoStr");
		String[] orderNoArr = orderNoStr.split(",");

		try {

			if (null != orderNoArr && orderNoArr.length > 0) {
				// 打印N张
				List<JasperPrint> JasperPrintList = new ArrayList<JasperPrint>();
				for (int i = 0; i < orderNoArr.length; i++) {
					SwLongOrderModel model_q = new SwLongOrderModel();
					model_q.setOrderNo(orderNoArr[i]);
					// 根据订单号查询托盘标签打印信息
					List<SwLongOrderModel> list = manager.longOrderPrintTpLabel(model_q);
					for (int j = 0; j < list.size(); j++) {
						String filenurl = FileUtil.getClassesPath() + File.separator + "template" + File.separator
								+ "ireport" + File.separator + "demo" + File.separator + "TP_LABEL.jasper";
						InputStream file = new FileInputStream(filenurl);
						HashMap<String, Object> parameters = new HashMap<String, Object>();
						SwLongOrderModel model = list.get(j);
						parameters.put("supplierNo", model.getSupplierNo());
						parameters.put("supplierName", model.getSupplierName());
						parameters.put("unloadPort", model.getUnloadPort());
						parameters.put("distriBatchNo", "");
						parameters.put("orderNo", model.getOrderNo());
						parameters.put("purchaseOrderno", model.getPurchaseNo());
						// 托盘总数
						parameters.put("total", "" + list.size());
						// 第 ?拖
						parameters.put("no", "" + (j + 1));
						JRDataSource jRDataSource = new JREmptyDataSource();
						JasperPrint jasperPrint = JasperFillManager.fillReport(file, parameters, jRDataSource);
						JasperPrintList.add(jasperPrint);

					}
				}
				response.setContentType("application/pdf");
				response.setHeader("Content-disposition", "inline;");
				JRPdfExporter exporter = new JRPdfExporter();
				OutputStream out = response.getOutputStream();
				exporter.setParameter(JRExporterParameter.JASPER_PRINT_LIST, JasperPrintList);
				exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, out);
				exporter.exportReport();

			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.toString());
			throw new Exception("系统错误,请联系管理员");
		}
	}

	/**
	 * 更新发货单数据
	 * 
	 * @param m Lxh
	 * @throws Exception
	 */
	
	@RequestMapping("updateLongDelivery")
	public void updateDelivery(HttpServletRequest request, HttpServletResponse response, SwLongOrderModel m) throws Exception {
		String message = "";
		try {

			IUser user = ContextUtil.getCurrentUser();
			m.setLastModifiedUser(user.getAccount());
			m.setFactoryCode(user.getCurFactoryCode());
			manager.updateDelivery(m,RequestUtil.getIpAddr(request));
			message = "更新成功";
			writeResultMessage(response.getWriter(), message, ResultMessage.SUCCESS);
	
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.toString());
			throw new Exception("系统错误,请联系管理员");
		}
	}
	
	/**
	 * 
	 * @Description: 获取发布版本号
	 * @param @param request
	 * @param @param response
	 * @param @return
	 * @param @throws Exception   
	 * @return Map<String,Object>  
	 * @throws  
	 * @author luoxq
	 * @date 2019年1月25日 上午10:14:56
	 */
	@RequestMapping("getVersion")
	public @ResponseBody List<SwLongOrderModel> getVersion(HttpServletRequest request,HttpServletResponse response) throws Exception {
		try {
			List<SwLongOrderModel> list = manager.getVersion();
			
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.toString());
			throw new Exception("系统错误,请联系管理员");		
		}
	}
	

}

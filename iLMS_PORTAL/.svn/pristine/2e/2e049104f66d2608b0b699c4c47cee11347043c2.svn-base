package com.hotent.mini.controller;

import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.AccountExpiredException;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.LockedException;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy;
import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hanthink.pub.manager.PubSupplierManager;
import com.hanthink.pub.model.PubSupplierModel;
import com.hotent.base.core.util.AppUtil;
import com.hotent.base.core.util.string.StringUtil;
import com.hotent.base.core.web.CookieUitl;
import com.hotent.base.core.web.RequestUtil;
import com.hotent.base.persistence.manager.CacheUtil;
import com.hotent.mini.web.context.SubSystemUtil;
import com.hotent.mini.web.security.HtSwitchUserFilter;
import com.hotent.mini.web.security.SecurityUtil;
import com.hotent.org.api.model.IUser;
import com.hotent.org.api.service.IUserService;
import com.hotent.sys.api.auth.IAuthService;
import com.hotent.sys.api.auth.IAuthUser;

@Controller
public class LoginController {
	@Resource
	AuthenticationManager authenticationManager;
	@Resource
	IUserService userService;
	//@Resource
	SessionAuthenticationStrategy sessionStrategy= new NullAuthenticatedSessionStrategy();
	@Resource
	IAuthService authService;
	
	private  String defaultLogin="/login";
	

	@RequestMapping(value = "/login/valid", method = RequestMethod.POST)
	@ResponseBody
	public Object login(HttpServletRequest request, HttpServletResponse response) {
		
		String referer=request.getHeader("Referer");
		if(referer.indexOf("mobile")>-1){
			CookieUitl.addCookie("loginAction", "mobile", true, request, response);
		}
		
		
		String account = RequestUtil.getString(request, "account");
		String password = RequestUtil.getString(request, "password");
		if(StringUtil.isEmpty(account)){
			return new LoginResult(false, null ,"账号不能为空.");
		}
		if(StringUtil.isEmpty(password)){
			return new LoginResult(false, null ,"密码不能为空.");
		}
		
		String systemId = SubSystemUtil.getSystemId(request);
		
		//删除切换用户标识
		CookieUitl.delCookie(HtSwitchUserFilter.SwitchAccount, request, response);
		try {
			
			IUser user = userService.getUserByAccount(account);
			Authentication auth = SecurityUtil.login(request, account, password, false);
			
			sessionStrategy.onAuthentication(auth, request, response);
			//增加用户类型判断，若为供应商用户需判断供应商状态
			if(IUser.USER_TYPE_SUPP.equals(user.getUserType())){
				if(StringUtil.isEmpty(user.getSupplierNo())){
					return new LoginResult(false, null ,"没有供应商代码.");
				}
				PubSupplierManager supManager = AppUtil.getBean(PubSupplierManager.class);
				PubSupplierModel tmpSup = new PubSupplierModel();
				tmpSup.setSupplierNo(user.getSupplierNo());
				PubSupplierModel sup = supManager.querySupplierBySupplierNo(tmpSup);
				if(null == sup){
					return new LoginResult(false, null ,"供应商【" + user.getSupplierNo() + "】不存在！");
				}
				String uid = authService.setAuth(user);
				IAuthUser authUser = authService.getByUid(uid);
				//新增供应商激活状态判断,需要截取登录账号的前5位为供应商代码，后1位为出货地
				try {
					Integer count = userService.querySupplierAccountStatus(account);
					if(count != 1){
						return new LoginResult(false, account, authUser.getTokenValue(), "供应商【" + user.getSupplierNo() + "】未激活！");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
//				if(!PubSupplierModel.SUP_STATUS_ACT.equals(sup.getSupStatus())){
//				    return new LoginResult(false, account, authUser.getTokenValue(), "供应商【" + user.getSupplierNo() + "】未激活！");
//				}
			}
			
			String uid = authService.setAuth(user);
			if(authService.isCluster()){
				//共享session
				SecurityUtil.addSessionId2Cache(request, account);
			}
			//执行记住密码动作。
			SecurityUtil.writeRememberMeCookie( request,  response,  account,password);
			
			//清除资源缓存
			CacheUtil.cleanCache(CacheUtil.RESOURCE_USER_RES + systemId + user.getUserId());
			CacheUtil.cleanCache(CacheUtil.RESOURCE_REQ_USER_RES + systemId + user.getUserId());
			
			IAuthUser authUser = authService.getByUid(uid);
			return new LoginResult(true, uid, authUser.getTokenValue(), "登陆成功");
		} catch (BadCredentialsException e) {
			return new LoginResult(false, null ,"账号或密码错误.");
		}
		catch (DisabledException e) {
			return new LoginResult(false, null ,"帐号被禁用.");
		}
		catch (LockedException e) {
			return new LoginResult(false, null ,"帐号被锁定.");
		}
		catch (AccountExpiredException e) {
			return new LoginResult(false, null ,"帐号过期.");
		}
		catch(Exception ex){
			return new LoginResult(false, null ,ex.getMessage());
		}
	}
	
	
	@SuppressWarnings("unchecked")
	@RequestMapping("/loginRedirect")
	public void loginRedirect(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String loginAction=CookieUitl.getValueByName("loginAction", request);
		String redirectUrl="";
		Map<String,String> actionPageMap=(Map<String,String>)AppUtil.getBean("actionPageMap");
		if(StringUtil.isNotEmpty(loginAction) && actionPageMap.containsKey(loginAction)){
			//删除cookie
			CookieUitl.delCookie("loginAction", request, response);
			redirectUrl=actionPageMap.get(loginAction);
			response.sendRedirect(request.getContextPath() +redirectUrl);
			return ;
		}
		response.sendRedirect(request.getContextPath() +this.defaultLogin);
		
	}

	public class LoginResult {
		private final boolean success;
		
		private final String username;
		private final String message;
		private String token;

		public LoginResult(boolean success, String username,String message) {
			this.success = success;
			this.username = username;
			this.message = message;
		}
		
		public LoginResult(boolean success, String username, String token, String message) {
			this.success = success;
			this.username = username;
			this.token = token;
			this.message = message;
		}

		public boolean isSuccess() {
			return success;
		}

		public String getUsername() {
			return username;
		}
		
		public String getMessage() {
			return message;
		}
		public String getToken(){
			return this.token;
		}
	}
	
	
	
}
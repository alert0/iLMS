package com.hanthink.jiso.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.RowBounds;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hanthink.business.util.MakeQrcodeImages;
import com.hanthink.jiso.manager.JisoInsManager;
import com.hanthink.jiso.model.JisoInsModel;
import com.hanthink.pub.model.PubPrintInsModel;
import com.hanthink.util.excel.ExcelUtil;
import com.hotent.base.api.model.ResultMessage;
import com.hotent.base.core.util.FileUtil;
import com.hotent.base.core.util.string.StringUtil;
import com.hotent.base.core.web.GenericController;
import com.hotent.base.core.web.RequestUtil;
import com.hotent.base.db.mybatis.domain.DefaultPage;
import com.hotent.base.db.mybatis.domain.PageJson;
import com.hotent.base.db.mybatis.domain.PageList;
import com.hotent.org.api.model.IUser;
import com.hotent.sys.util.ContextUtil;
import com.hotent.sys.util.SysPropertyUtil;

import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;

/**
 * @ClassName: JisoInsController
 * @Description: 厂外同步指示票
 * @author dtp
 * @date 2018年9月18日
 */
@Controller
@RequestMapping("/jiso/ins")
public class JisoInsController extends GenericController{
	
	@Resource 
	private JisoInsManager jisoInsManager;
	
	/**
	 * @Description:  查询厂外同步指示票
	 * @param: @param request
	 * @param: @param response
	 * @param: @param model
	 * @param: @return    
	 * @return: PageJson   
	 * @author: dtp
	 * @date: 2018年9月18日
	 */
	@RequestMapping("queryJisoInsPage")
	public @ResponseBody PageJson queryJisoInsPage(HttpServletRequest request,HttpServletResponse response, 
			@ModelAttribute("model") JisoInsModel model) {
		IUser user = ContextUtil.getCurrentUser();
		model.setSupplierNoAuth(user.getSupplierNo());
		model.setUserId(user.getUserId());
		model.setUserType(user.getUserType());
		DefaultPage page=new DefaultPage(new RowBounds(getQueryFilter(request).getPage().getStartIndex(), 
				getQueryFilter(request).getPage().getPageSize()));
		PageList<JisoInsModel> pageList = jisoInsManager.queryJisoInsPage(model, page);
		return new PageJson(pageList);
		
	}
	
	/**
	 * @Description: 根据指示票号查询厂外同步指示票明细 
	 * @param: @param request
	 * @param: @param response
	 * @param: @param model
	 * @param: @return    
	 * @return: PageJson   
	 * @author: dtp
	 * @date: 2018年9月19日
	 */
	@RequestMapping("queryJisoInsDetailPageByInsNo")
	public @ResponseBody PageJson queryJisoInsDetailPageByInsNo(HttpServletRequest request,HttpServletResponse response,
			@ModelAttribute("model") JisoInsModel model) {
		DefaultPage page=new DefaultPage(new RowBounds(getQueryFilter(request).getPage().getStartIndex(), 
				getQueryFilter(request).getPage().getPageSize()));
		PageList<JisoInsModel> pageList = jisoInsManager.queryJisoInsDetailPageByInsNo(model, page);
		return new PageJson(pageList);
		
	}
	
	/**
	 * @Description: 导出厂外同步指示票excel 
	 * @param: @param request
	 * @param: @param response    
	 * @return: void   
	 * @author: dtp
	 * @date: 2018年9月19日
	 */
	@RequestMapping("downloadJisoIns")
	public void downloadJisoIns(HttpServletRequest request,HttpServletResponse response,
				@ModelAttribute("model") JisoInsModel model) {
		IUser user = ContextUtil.getCurrentUser();
		model.setSupplierNoAuth(user.getSupplierNo());
		model.setUserId(user.getUserId());
		model.setUserType(user.getUserType());
		String exportFileName = "厂外同步指示票" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		DefaultPage page=new DefaultPage(new RowBounds(getQueryFilter(request).getPage().getStartIndex(), 
				getQueryFilter(request).getPage().getPageSize()));
		PageList<JisoInsModel> pageList = jisoInsManager.queryJisoInsPage(model, page);
		//判断记录是否超过系统允许数量
		int curNum = pageList.getPageResult().getTotalCount();
		if(0 == curNum){
			ExcelUtil.exportNoDataError(request, response);
			return;
		}
		int sysMaxNum = SysPropertyUtil.getIntByAlias("EXCEL_EXPORT_MAX_SIZE", 10000); //获取系统所允许的最大导出数量
		if(curNum > sysMaxNum){
			ExcelUtil.exportNumError(sysMaxNum, request, response);
			return;
		}
		List<JisoInsModel> list = jisoInsManager.queryJisoInsList(model);
		if(null != list) {
			String[] headers = {"指示票号", "零件组名称", "零件组代码", "指示票代码(供应商)", "供应商代码","出货地代码",
					"到货仓库", "配送地址", "备件批次进度","发货批次进度", "到货批次进度",
					"配送批次进度", "车次","装车代码","打印状态", "打印时间", 
					"是否手工组票","手工组票人","手工组票申请时间", "创建时间"};
			String[] columns = {"insNo", "partgroupName", "partgroupNo", "insSupfactorySeqno", "supplierNo","supFactory",
					"arrDepot", "location","prepareProductSeqno", "deliveryProductSeqno", "arriveProductSeqno", 
					"distriProductSeqno" ,"carBatch", "routeCode", "printStatus", "printTime",
					"isManuDeal", "manuReqUser", "manuReqTime", "creationTime"};
			int[] widths = {100, 100, 100, 100, 100, 100,
					80, 80, 100, 100, 100,
					100, 60, 80, 80, 100,
					100, 100, 120, 100};
			ExcelUtil.exportExcel(ExcelUtil.EXCEL_XLSX, request, response, exportFileName, list, headers, widths, columns);
			
		}
		
	}
	
	/**
	 * @Description:  厂外同步指示票明细导出excel
	 * @param: @param request
	 * @param: @param response    
	 * @return: void   
	 * @author: dtp
	 * @date: 2018年9月19日
	 */
	@RequestMapping("downloadJisoInsDetail")
	public void downloadJisoInsDetail(HttpServletRequest request,HttpServletResponse response,
			@ModelAttribute("model") JisoInsModel model) {
		IUser user = ContextUtil.getCurrentUser();
		model.setSupplierNoAuth(user.getSupplierNo());
		model.setUserId(user.getUserId());
		model.setUserType(user.getUserType());
		String exportFileName = "厂外同步指示票明细" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		List<JisoInsModel> list = jisoInsManager.downloadJisoInsDetail(model);
		if(null != list) {
			int curNum = list.size();
			if(0 == curNum){
				ExcelUtil.exportNoDataError(request, response);
				return;
			}
			int sysMaxNum = SysPropertyUtil.getIntByAlias("EXCEL_EXPORT_MAX_SIZE", 10000); //获取系统所允许的最大导出数量
			if(curNum > sysMaxNum){
				ExcelUtil.exportNumError(sysMaxNum, request, response);
				return;
			}
			String[] headers = {"指示票号", "零件组名称", "出货批次", "到货批次",
					"PA OFF时间", "车身序号", "VIN", "记号", 
					"简号", "零件号", "零件名称", "数量"};
			String[] columns = {"insNo", "partgroupName", "deliveryProductSeqno", "arriveProductSeqno",
					"passTime", "wcSeqno", "vin", "partMark",
					"partShortNo", "partNo", "partName", "requireNum"};
			int[] widths = {100, 100, 100, 100,
					150, 100, 100, 100,
					100, 100, 100, 100};
			ExcelUtil.exportExcel(ExcelUtil.EXCEL_XLSX, request, response, exportFileName, list, headers, widths, columns);
			
		}
		
	}
	
	/**
	 * @Description: 厂外同步指示票打印   
	 * @param: @param request
	 * @param: @param response    
	 * @return: void   
	 * @author: dtp
	 * @throws JRException 
	 * @throws IOException 
	 * @date: 2018年9月19日
	 */
	@RequestMapping("jisoInsPrint")
	public void jisoInsPrint(HttpServletRequest request,HttpServletResponse response) throws Exception {
		String insNoStr = RequestUtil.getString(request, "insNo");
		String[] insNoArr = insNoStr.split(",");
		if(null != insNoArr && insNoArr.length > 0) {
			//打印N张
			List<JasperPrint> JasperPrintList = new ArrayList<JasperPrint>();
			//更新打印状态list
			List<JisoInsModel> list_printInfo = new ArrayList<JisoInsModel>();
			for (int j = 0; j < insNoArr.length; j++) {
				JisoInsModel model_q = new JisoInsModel();
				String filenurl = FileUtil.getClassesPath() + File.separator + "template" 
						+ File.separator +"ireport" + File.separator + "jis" + File.separator + "JISO_INS.jasper";
				InputStream file = new FileInputStream(filenurl);
				model_q.setInsNo(insNoArr[j]); 
				model_q.setPrintUser(ContextUtil.getCurrentUser().getAccount());
				model_q.setPrintUserIp(RequestUtil.getIpAddr(request));
				//指示票明细
				List<JisoInsModel> detailList = jisoInsManager.queryJisoInsDetailList(model_q);
				list_printInfo.add(model_q);
				HashMap<String, Object> parameters = new HashMap<String, Object>();
				List<PubPrintInsModel> list = new ArrayList<PubPrintInsModel>();
				//行数统计
				int rowCount = 0;
				//每列最多显示行数
				int maxRowSize = 21;
				//页码
				int page = 1;
				//打印页码
				int size = detailList.size();
				int totalPage = 1;
				//整除
				if(size%(maxRowSize*2) == 0) {
					totalPage = size/(maxRowSize*2);
				}else if(size%(maxRowSize*2) != 0) {
					totalPage = size/(maxRowSize*2) + 1;
				}
				//目的填充空白行
				int totalRowCount = totalPage * maxRowSize;
				
				if(null != detailList && detailList.size() > 0) {
					for (int i = 0; i < detailList.size(); i++) {
						//行数自增
						rowCount++;
						JisoInsModel model = detailList.get(i);
						//指示票头信息
						if(rowCount == 1) {
							parameters.put("insNo", model.getInsNo());
							parameters.put("arriveTime", model.getArriveTime());
							parameters.put("supplierName", model.getSupplierName());
							parameters.put("supplierNo", model.getSupplierNo());
							//零件名称取主表零件组名称
							parameters.put("partName", model.getPartgroupName());
							//车身序号
							String csxh = "";
							if(StringUtil.isNotEmpty(model.getWcSeqno()) && 
									StringUtil.isNotEmpty(detailList.get(detailList.size()-1).getWcSeqno())) {
								csxh = model.getWcSeqno() + "~" + detailList.get(detailList.size()-1).getWcSeqno();
								//收容数
								parameters.put("srs", String.valueOf(detailList.size()));
							}
							parameters.put("csxh", csxh);
							parameters.put("distriPerson", model.getDistriPerson());
							parameters.put("location", model.getLocation());
							//二维码
							String qrCode = model.getInsNo();
							parameters.put("QRCode", MakeQrcodeImages.getQrCodeImage(qrCode, "80", "80"));
						}
						PubPrintInsModel insBean = new PubPrintInsModel(); 
						if(rowCount <= maxRowSize * ( 2 * page - 1 )) {
							insBean.setWcSeqno(model.getWcSeqno());
							insBean.setPartShortNo(model.getPartShortNo());
							insBean.setPartMark(model.getPartMark());
							insBean.setPartNo(model.getPartNo());
							insBean.setRemarkFlag(model.getRemarkFlag());
						}else if(rowCount > maxRowSize * ( 2 * page - 1 ) && rowCount <= maxRowSize * 2 * page ) {
							insBean = list.get(rowCount - 1 - maxRowSize * page );
							insBean.setWcSeqno2(model.getWcSeqno());
							insBean.setPartShortNo2(model.getPartShortNo());
							insBean.setPartMark2(model.getPartMark());
							insBean.setPartNo2(model.getPartNo());
							insBean.setRemarkFlag2(model.getRemarkFlag());
						}
						if(null != insBean && rowCount <= maxRowSize * ( 2 * page - 1 )) {
							list.add(insBean);
						}
						//换页
						if(rowCount == maxRowSize * 2 * page) {
							page++;
						}
					}
					//填充空白行
					if((totalRowCount - list.size()) > 0) {
						int blackRow = totalRowCount - list.size();
						for (int k = 0; k < blackRow; k++) {
							PubPrintInsModel insBlackBean = new PubPrintInsModel(); 
							list.add(insBlackBean);
						}
					}
					JRDataSource jRDataSource;
					if (list.size() > 0) {
						jRDataSource = new JRBeanCollectionDataSource(list);
					} else {
						jRDataSource = new JREmptyDataSource();
					}
					JasperPrint jasperPrint = JasperFillManager.fillReport(file, parameters, jRDataSource);
					JasperPrintList.add(jasperPrint); 
				}
			}
			//JRE异常
			if(JasperPrintList.size() > 0) {
				response.setContentType("application/pdf");
				response.setHeader("Content-disposition", "inline;");
				JRPdfExporter exporter = new JRPdfExporter();
				OutputStream out = response.getOutputStream();
				exporter.setParameter(JRExporterParameter.JASPER_PRINT_LIST, JasperPrintList);
				exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, out);
				exporter.exportReport();
				//更新打印状态
				jisoInsManager.updatePrintStatus(list_printInfo, RequestUtil.getIpAddr(request), insNoArr);
			}else {
				writeResultMessage(response.getWriter(), "没有数据可打印", ResultMessage.FAIL);
			}
		}
	
	}

}
